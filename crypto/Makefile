#
# OpenSSL/crypto/Makefile
#

INCLUDE_crypto=	-Icrypto -I. -Iinclude $(ZLIB_INCLUDE)
# INCLUDES_crypto targets sudbirs!
INCLUDES_crypto=	-Icrypto -I. -Icrypto/modes -Icrypto/asn1 -Icrypto/evp -Iinclude $(ZLIB_INCLUDE)
RM_crypto=             rm -f

CFLAGS_crypto= $(INCLUDE_crypto) $(CFLAG)
ASFLAGS_crypto= $(INCLUDE_crypto) $(ASFLAG)
AFLAGS_crypto=$(ASFLAGS_crypto)

LIBS_crypto=

GENERAL_crypto=crypto/Makefile crypto/README crypto/crypto-lib.com crypto/install.com

LIB_crypto= libcrypto.a
SHARED_LIB_crypto= libcrypto$(SHLIB_EXT)
LIBSRC_crypto=	crypto/cryptlib.c crypto/mem.c crypto/mem_clr.c crypto/mem_dbg.c crypto/cversion.c crypto/ex_data.c crypto/cpt_err.c \
	crypto/ebcdic.c crypto/uid.c crypto/o_time.c crypto/o_str.c crypto/o_dir.c crypto/thr_id.c crypto/lock.c crypto/fips_ers.c \
	crypto/o_init.c crypto/o_fips.c
LIBOBJ_crypto= crypto/cryptlib.o crypto/mem.o crypto/mem_dbg.o crypto/cversion.o crypto/ex_data.o crypto/cpt_err.o \
	crypto/ebcdic.o crypto/uid.o crypto/o_time.o crypto/o_str.o crypto/o_dir.o crypto/thr_id.o crypto/lock.o crypto/fips_ers.o \
	crypto/o_init.o crypto/o_fips.o $(CPUID_OBJ)

SRC_crypto= $(LIBSRC_crypto)

EXHEADER_crypto= crypto/crypto.h crypto/opensslv.h crypto/opensslconf.h crypto/ebcdic.h crypto/symhacks.h \
	crypto/ossl_typ.h
HEADER_crypto=	crypto/cryptlib.h crypto/buildinf.h crypto/md32_common.h crypto/o_str.h crypto/o_dir.h $(EXHEADER_crypto)

ALL_crypto=    $(GENERAL_crypto) $(SRC_crypto) $(HEADER_crypto)


all: all_crypto
all_crypto: shared_crypto

fips: crypto/cryptlib.o crypto/thr_id.o crypto/uid.o $(CPUID_OBJ)

crypto/buildinf.h: ./Makefile
	( echo "#ifndef MK1MF_BUILD"; \
	echo '  /* auto-generated by crypto/Makefile for crypto/cversion.c */'; \
	echo '  #define CFLAGS "$(CC) $(CFLAG)"'; \
	echo '  #define PLATFORM "$(PLATFORM)"'; \
	echo "  #define DATE \"`LC_ALL=C LC_TIME=C date`\""; \
	echo '#endif' ) >crypto/buildinf.h

crypto/x86cpuid.s:	crypto/x86cpuid.pl crypto/perlasm/x86asm.pl
	$(PERL) crypto/x86cpuid.pl $(PERLASM_SCHEME) $(CFLAGS_crypto) $(PROCESSOR) > $@

crypto/applink.o:	ms/applink.c
	$(CC) $(CFLAGS_crypto) -c -o $@ ms/applink.c

crypto/uplink.o:	ms/uplink.c crypto/applink.o
	$(CC) $(CFLAGS_crypto) -c -o $@ ms/uplink.c

crypto/uplink-x86.s:	ms/uplink-x86.pl
	$(PERL) ms/uplink-x86.pl $(PERLASM_SCHEME) > $@

crypto/x86_64cpuid.s:	crypto/x86_64cpuid.pl;	$(PERL) crypto/x86_64cpuid.pl $(PERLASM_SCHEME) > $@
crypto/ia64cpuid.s:	crypto/ia64cpuid.S;	$(CC) $(CFLAGS_crypto) -E crypto/ia64cpuid.S > $@
crypto/ppccpuid.s:	crypto/ppccpuid.pl;	$(PERL) crypto/ppccpuid.pl $(PERLASM_SCHEME) $@
crypto/pariscid.s:	crypto/pariscid.pl;	$(PERL) crypto/pariscid.pl $(PERLASM_SCHEME) $@
crypto/alphacpuid.s:	crypto/alphacpuid.pl
	(preproc=/tmp/$$$$.$@; trap "rm $$preproc" INT; \
	$(PERL) crypto/alphacpuid.pl > $$preproc && \
	$(CC) -E $$preproc > $@ && rm $$preproc)

files: files_crypto
files_crypto:
	$(PERL) util/files.pl TOP=. "CPUID_OBJ=$(CPUID_OBJ)" Makefile >> MINFO

links: links_crypto
links_crypto:
	@$(PERL) util/mklink.pl include/openssl $(EXHEADER_crypto)
	@$(PERL) util/mklink.pl ./test $(TEST)
	@$(PERL) util/mklink.pl ./apps $(APPS)

# lib: $(LIB_crypto): are splitted to avoid end-less loop
crypto/lib:	$(LIB_crypto)
	@touch crypto/lib
$(LIB_crypto):	$(LIBOBJ_crypto)
	$(ARX) $(LIB_crypto) $(LIBOBJ_crypto)
	$(RANLIB) $(LIB_crypto) || echo Never mind.

shared: shared_crypto
shared_crypto: crypto/buildinf.h crypto/lib crypto/subdirs
	if [ -n "$(SHARED_LIBS)" ]; then \
		(cd crypto/..; $(MAKE) $(SHARED_LIB_crypto)); \
	fi

install: install_crypto
install_crypto:
	@[ -n "$(INSTALLTOP)" ] # should be set by top Makefile...
	@headerlist="$(EXHEADER_crypto)"; for i in $$headerlist ;\
	do \
	(cp $$i $(INSTALL_PREFIX)$(INSTALLTOP)/include/openssl/$$i; \
	chmod 644 $(INSTALL_PREFIX)$(INSTALLTOP)/include/openssl/$$i ); \
	done;

clean: clean_crypto
clean_crypto:
	rm -f crypto/buildinf.h crypto/*.s crypto/*.o crypto/*.d */*.o */*.d crypto/*.obj crypto/lib tags crypto/core crypto/.pure crypto/.nfs* crypto/*.old crypto/*.bak crypto/fluff

dclean: dclean_crypto
dclean_crypto:
	rm -f crypto/opensslconf.h

crypto/cversion.c: crypto/buildinf.h

.c.o:
	$(CC) $(CFLAGS_crypto) $(CPPFLAGS) -c -o $@ $<
.s.o:
	$(AS) $(ASFLAGS_crypto) -o $@ $<
